@page "/fetchdata"
@inherits StateComponent
<PageTitle>Weather forecast</PageTitle>

@using BlazorStateManagement.Demo.Data
@inject WeatherForecastService ForecastService
@inject IState<FetchState> FetchState
@inject IDispatcher Dispatcher

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
Updated State: @StateUpdated
<button @onclick="UpdateWeather" class="btn btn-primary" value="Update Weather" />

@if (FetchState.Value.CurrentForcasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in FetchState.Value.CurrentForcasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool StateUpdated { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        RegisterStateChangeCallback<FetchState>(_ => StateUpdated = true);
    }

    private async Task UpdateWeather()
    {
        await Dispatcher.DispatchAsync<FetchState>(async s => new FetchState { CurrentForcasts = await ForecastService.GetForecastAsync(DateTime.Now) });
    }
}
